get_grade(78)
get_grade <- function(marks){
if(marks >= 90 & marks <= 100){
return("A")
} else  if(marks >= 80 & marks <= 89){
return("B")
} else  if(marks >= 70 & marks <= 79){
return("C")
} else  if(marks >= 60 & marks <= 69){
return("D")
} else  if(marks >= 50 & marks <= 59){
return("E")
} else  if(marks >= 0 & marks <= 49){
return("F")
} else {
return("Invalid marks")
}
}
get_grade(78)
get_grade(90)
is_leap_year <- function(year){
if(year %% 4 == 0 & year %% 100 != 0 | year %% 400 == 0) {
return("leap year")
} else {
return("not a leap year")
}
}
is_leap_year(2000)
\
is_leap_year(2024)
simple_calculator <- function(num1,num2,operator){
if(operator == "+"){
return(num1 + num2)
} else if(operator == "-"){
return(num1 - num2)
} else if(operator == "*"){
return(num1 * num2)
}else if(operator == "/"){
return(num1 / num2)
}
}
simple_calculator(2,3,"+")
simple_calculator(2,3,"-")
simple_calculator(8,3,"*")
simple_calculator(2,10,"/")
fizzbuzz <- function(num) {
if(num %% 3 == 0 & num %% 5 == 0){
return("FizzBuzz")
} else if(num %% 3 == 0){
return("Fizz")
} else if(num %% 5 == 0){
return("Buzz")
} else {
return(num)
}
}
fizzbuzz(3)
fizzbuzz(78)
sum_of_digits <- function(num){
sum <- 0
while(num > 0){
sum <- sum + num %% 10
num <- num %% 10
}
return(sum)
}
sum_of_digits(1234)
sum_of_digits <- function(num){
sum <- 0
while(num > 0){
sum <- sum + num %% 10
num <- num %% 10
}
return(sum)
}
sum_of_digits(123)
vec <- c(2, 5, 8, 11, 14)
sum_odd_positions <- 0
for (i in 1:length(vec)) {
if (i %% 2 != 0) {
sum_odd_positions <- sum_odd_positions + vec[i]
}
}
sum_odd_positions
vec <- c(10, 20, 30, 40, 50)
count <- 0
for (i in vec) {
if (i <= 30) {
count <- count + 1
}
}
count
vec <- c(5, 10, 15, 20, 25)
sum_even <- 0
for (i in vec) {
if (i %% 2 == 0) {
sum_even <- sum_even + i
}
}
sum_even
vec <- c(3, 7, 1, 8, 2)
result <- 1
for (i in vec) {
if (i > 5) {
result <- result * i
}
}
result
for (i in c(1, 2, 3, 4)) { print(i) }
result <- c(Tom = 74)
for(i in names(result)) {
print(paste(i,'got',result[i],'marks'))
}
sum <- 0
i <- 1
while (i <= 5) {
sum <- sum + i
i <- i + 1
}
sum
for (i in 1:3) {
for (j in 1:2) {
print(i + j)
}
}
vec <- c()
i <- 1
while (i <= 10) {
vec <- c(vec, i)
i <- i + 2
}
vec
m <- matrix(0, nrow = 3, ncol = 3)
for (i in 1:3) {
for (j in 1:3) {
m[i, j] <- i * j
}
}
print(m)
x <- c(1, 2, 3)
for (i in x) {
x <- x + 1
}
print(x[2])
mat <- matrix(1:9, nrow = 3)
for (i in 1:nrow(mat)) {
for (j in 1:ncol(mat)) {
if (mat[i, j] %% 2 != 0) {
mat[i, j] <- mat[i, j] * 2
} else {
mat[i, j] <- mat[i, j] / 2
}
}
}
matrix(data, nrow = rows, ncol = cols)
for (variable in vector) {
}
mat <- matrix(1:9, nrow = 3)
for (i in 1:nrow(mat)) {
for (j in 1:ncol(mat)) {
if (mat[i, j] %% 2 != 0) {
mat[i, j] <- mat[i, j] * 2
} else {
mat[i, j] <- mat[i, j] / 2
}
}
}
matrix
lmat <- matrix(1:9, nrow = 3)
for (i in 1:nrow(mat)) {
for (j in 1:ncol(mat)) {
if (mat[i, j] %% 2 != 0) {
mat[i, j] <- mat[i, j] * 2
} else {
mat[i, j] <- mat[i, j] / 2
}
}
}
print(mat)
mat <- matrix(1:9, nrow = 3)
for (i in 1:nrow(mat)) {
for (j in 1:ncol(mat)) {
if (mat[i, j] %% 2 != 0) {
mat[i, j] <- mat[i, j] * 2
} else {
mat[i, j] <- mat[i, j] / 2
}
}
}
print(mat)
x <- c(1, 3, 5, 7)
for (i in 1:length(x)) {
if (x[i] %% 3 == 0) {
print(x[i])
}
}
vec <- c(5, 10, 15)
for (i in vec) {
if (i > 10) {
print(i)
}
}
y <- 0
for (i in 1:5) {
if (i %% 2 == 0) {
y <- y + i
}
}
print(y)
mat <- matrix(1:9, nrow = 3)
for (i in 1:nrow(mat)) {
for (j in 1:ncol(mat)) {
if (mat[i, j] %% 2 == 0) {
mat[i, j] <- mat[i, j] * 2
}
}
}
print(mat)
count <- 0
vec <- c(2, 5, 8, 10)
for (i in vec) {
if (i %% 2 == 0) {
count <- count + 1
}
}
print(count)
mat <- matrix(1:9, nrow = 3)
count <- 0
for (i in 1:nrow(mat)) {
for (j in 1:ncol(mat)) {
if (mat[i, j] %% 2 == 1) {
count <- count + 1
}
}
}
print(count)
Question 1
list1 <- list(3, 4)
list2 <- list(100, 200)
res1 <- c(list1, list2)
length(res1)
a <- list(1,2,3)
a
Question 7
x <- list(a = "first", b = "second", c = NULL)
x$b <- NULL
x
demo <- list(a = list(b = 1, c= 3), b = list(d = 4, e = 5))
demo[[2]][[2]] <- 7
demo$a$c <- 1
demo[[c(2,1)]] <- 1
demo
a <- (1,2,3)
a <- c(1,2,3)
b <- c(a,b,c)
c <- (TRUE,FALSE,TRUE)
a <- c(1,2,3)
b <- c(a,b,c)
c <- c(TRUE,FALSE,TRUE)
my_list <- list(a = a , b = b, c = c)
my_list()
print(my_list)
a <- c(1,2,3)> b <- c("a","b","c")
a <- c(1,2,3)
> b <- c("a","b","c")
student_data <- list()
student_list(name = c("john","jane","jin"))
student_data <- list(
name = c("john","jane","jim","rama","abhi","sara"),
age = c(20,45,56,34,23,45),
marks = list(
Maths = c(54,5,6,90,`12,23),
Science = c(23,90,87,56,10,20),
English = c(23,4,5,6,7,87),
)
)
john_maths_marks <- student_data$marks$Maths[student_data$name == "john"]
sara_science_marks <- student_data$marks$Sciencee[student_data$name == "sara"]
john_maths_marks
sara_science_marks
print(sara_science_marks)
student_data <- list(
name = c("john","jane","jim","rama","abhi","sara"),
age = c(20,45,56,34,23,45),
marks = list(
Maths = c(54,5,6,90,12,23),
Science = c(23,90,87,56,10,20),
English = c(23,4,5,6,7,87),
)
)
john_maths_marks <- student_data$marks$Maths[student_data$name == "john"]
sara_science_marks <- student_data$marks$Sciencee[student_data$name == "sara"]
john_maths_marks
sara_science_marks
john_maths_marks
print(john_maths_marks)
john_maths_marks
sara_science_marks
student_data <- list(
name = c("john","jane","jim","rama","abhi","sara"),
age = c(20,45,56,34,23,45),
marks = list(
Maths = c(54,5,6,90,12,23),
Science = c(23,90,87,56,10,20),
English = c(23,4,5,6,7,87),
)
)
student_data <- list(
name = c("john","jane","jim","rama","abhi","sara"),
age = c(20,45,56,34,23,45),
marks = list(
Maths = c(54,5,6,90,12,23),
Science = c(23,90,87,56,10,20),
English = c(23,4,5,6,7,87)
)
)
john_maths_marks <- student_data$marks$Maths[student_data$name == "john"]
sara_science_marks <- student_data$marks$Sciencee[student_data$name == "sara"]
john_maths_marks
sara_science_marks
my_list <- list(a = 1:3, b = "hello", c = 5:7)
if(length(my_list$c) == 3) {
"Length is 3"
} else {
"Length is not 3"
}
my_list <- list(a = 1:3, b = "hello", c = 5:7)
sum(unlist(my_list$a))
my_list <- list(a = 1:3, b = "hello", c = 5:7)
for(i in my_list$a) {
print(i)
}
my_list <- list(a = 1:3, b = "hello", c = 5:7)
sapply(my_list, length)
my_list <- list(a = 1:3, b = "hello", c = 5:7)
my_list$e <- c(10, 11, 12)
ifelse(my_list$e[2] == 11, "Yes", "No")
my_list <- list(a = 1:3, b = "hello", c = 5:7)
my_list[[1]] <- my_list[[1]] * 2
my_list$a
my_list <- list(a = 1:3, b = "hello", c = 5:7)
v <- c()
for(i in my_list) {
if(is.vector(i)) {
v <- c(v, length(i))
}
}
sum(v)
education <- factor(c("High School", "Undergraduate", "Graduate", "Undergraduate", "Graduate", "High School"))
nlevels(education)
cut(temp, breaks = c(-Inf, 0, 100, Inf), labels = c("solid", "liquid", "gas")) to temp <- c(17.5, -4.3, 36.0, 68.1, 130.0)
cut(temp, breaks = c(-Inf, 0, 100, Inf), labels = c("solid", "liquid", "gas"))  temp <- c(17.5, -4.3, 36.0, 68.1, 130.0)
cut(temp, breaks = c(-Inf, 0, 100, Inf), labels = c("solid", "liquid", "gas"))
cut(temp, breaks = c(-Inf, 0, 100, Inf), labels = c("solid", "liquid", "gas")) to cut(temp, breaks = c(-Inf, 0, 100, Inf), labels = c("solid", "liquid", "gas")) to temp <- c(17.5, -4.3, 36.0, 68.1, 130.0)
cut(temp, breaks = c(-Inf, 0, 100, Inf), labels = c("solid", "liquid", "gas")) temp <- c(17.5, -4.3, 36.0, 68.1, 130.0)
summary(factor(c("yes", "no", "yes", "no", "yes", "no")))
Question 5
start_date <- as.Date("2024-07-08")
end_date <- start_date + 30
end_date
fruits <- factor(c("apple", "banana", "apple", "cherry"), levels = c("apple", "banana", "cherry", "date"))
print(summary(fruits))
degree <- c("master","master","bachelor","phd","bachelor","master")
class(degree)
(degree<-factor(degree))
summary(degree)
plot(degree,col="navyblue")
plot(degree,col="pink")"
)plot(degree,col="navyblue")
plot(degree,col="pink")
list(class = class(degree),
typrof=typrof(degree),
typeof=typrof(degree),
atrributes=attributes(degree)
list(levels=levels(degree),nlevels=nlevels(degree))
ist(class  = class(degree),
typeof = typeof(degree),  # <- !!!!
attributes = attributes(degree))
degree2 <- c(1L,3L,1L)
degree2 <- factor(degree2,levels=1:3,labels=c("bachelor","master","phd"))
oderdegree <- factor(c(1L,3L,1L),levels=1:3,labels=c("bachelor","master","phd"),orderd = TRUE)
degree2 <- c(1L,3L,1L)
degree2 <- factor(degree2,levels=1:3,labels=c("bachelor","master","phd"))
oderdegree <- factor(c(1L,3L,1L),levels=1:3,labels=c("bachelor","master","phd"),ordered = TRUE)
oderdegree
odegree[1]>odegree[2]
oderdegree[1]>odegree[2]
temp <- c(17.5, -4.3, 36.0, 68.1, 130.0)  # observations
cut(temp, breaks = c(-Inf, 0, 100, Inf),        # 4 breakpoints = 3 segments
labels = c("solid", "liquid", "gas")) # 3 labels (categories)
degree[5] <- "bachelor"       # replaces element 5
degree[6] <- "habilitation"   # won't work, not a valid level!
degree <- factor(c("master", "master", "bachelor", "phd", "master", "bachelor"))
degree_int <- as.integer(degree)     # coerce to integer
degree_chr <- as.character(degree)   # coerce to character
print(degree)
summary(degree)
plot(degree, main = "'Default' plot for factor object (the good)")
pm25 <- c(100, 75, 230, 220, 50)   # Vector for testing
attr(pm25, "limit") <- 150         # Adding attribute 'limit'
class(pm25) <- "threshold"         # Adding class attribute
print(pm25)
as.character() expects two inputs : x(main object) and ... (further arguments). Our as.character.threshold() should return "+" if a value is above limit and "-" else.
as.character()
as.character.threshold <- function(x, ...){
res <- ifelse(x > attr(x, "limit"), "+", "-" )
return(res)0
as.character.threshold <- function(x, ...){
res <- ifelse(x > attr(x, "limit"), "+", "-" )
return(res)
}
as.character(pm25)
print.threshold <- function(x, ...){
res <- format(x, justify= "right")
res <- paste0(res, as.character(x))
print(res, quote=FALSE)
invisible(x)
}
print(pm25)
summary.threshold <- function(object, ...) {
num <- summary(as.numeric(object))
tab <- table(as.character(object))
cat("Numeric:\n")
print(num)
cat("\n Table:")
print(tab)
invisible(list("numeric"=num, "table"=tab))
}
summary(pm25)
plot.threshold <- function(x, pch = NULL, type = "o", ...) {
# Use character representation if pch = NULL
# to plot a + or - later on.
if (is.null(pch)) pch <- as.character(x)
# Calling default plot function for numeric vectors
plot(as.numeric(x), pch = pch, type = type, ...)
# Adding a horizontal line for the limit
abline(h = attr(x, "limit"), col = "gray", lty = 2)
# Invisible return
invisible(x)
}
par(mfrow = c(1, 2))                         # Subplot definition
plot(pm25)                                   # Default
plot(pm25, col = 2, main = "Test", cex = 3)  # Custom
hist.threshold <- function(x, lcol = 2, ...) {
res <- hist(as.numeric(x), ...)  # Default histogram
abline(v = attr(x, "limit"), col = lcol, lwd = 2) # Adding limit
invisible(res) # Return
}
par(mfrow = c(1, 2))                 # Subplot definition
hist(pm25)                           # Default
hist(pm25, lcol = 3, main = "Test")  # Custom
threshold <- function(x, limit) {
stopifnot(is.numeric(x))
stopifnot(is.numeric(limit), length(limit) == 1L, limit > 0)
class(x) <- "threshold"
attr(x, "limit") <- limit
return(x)
}
as.character.threshold <- function(x, ...) {
res <- ifelse(x > attr(x, "limit"), "+", "-")
return(res)
}
summary.threshold <- function(object, ...) {
num <- summary(as.numeric(object))
tab <- table(as.character(object))
cat("Numeric:\n")
print(num)
cat("\nTable:")
print(tab)
invisible(list("numeric" = num, "table" = tab))
}
pm25 <- threshold(c(10, 150, 200, 90, 130), limit = 100)
summary(pm25)
threshold <- function(x, limit) {
stopifnot(is.numeric(x))
stopifnot(is.numeric(limit), length(limit) == 1L, limit > 0)
class(x) <- "threshold"
attr(x, "limit") <- limit
return(x)
}
as.character.threshold <- function(x, ...) {
res <- ifelse(x > attr(x, "limit"), "+", "-")
return(res)
}
pm25 <- threshold(c(80, 160, 120, 180, 60), limit = 150)
as.character(pm25)
d <- as.Date("2021-06-01")
d + 0:3
dates <- seq(from = as.Date("2021-01-01"), to = as.Date("2022-01-01") - 5, by = 1L)
c(min(dates), max(dates))
birthday <- as.Date("1991-10-12")
birthday_month <- format(birthday, format = "%B")
print(birthday_month)
temp <- cut(c(117.5, -4.3, -0.1, 0, 100, 120, 100.01), breaks=c(-Inf, 0, 100, Inf), labels=c("solid", "liquid", "gas"))
temp
levels(temp)[as.numeric(temp[4])]
levels(temp)[1]
levels(temp)[as.numeric(temp[5])]
levels(temp)[as.numeric(temp[3])]
save(file = "persons.rda", objects = c("persons", "info"))
save(file = "persons.rda", objects = c("persons", "info"))
x <- -1:50
save(x, file = "test.rda")
load("test.rda", verbose = TRUE)
name: names.csv
p <- ggplot()
p <- ggplot()
X<- c(5,10,3,2)
mad_value <- median(abs(X - median(X)))
print(mad_value)
partial <- c(10, 20, NA, 30)
mean(x = partial, na.rm = TRUE)
